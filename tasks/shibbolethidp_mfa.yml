---
# tasks file for CSCfi.devidp

- set_fact:
    mfa_provider: {{ shibbolethidp_mfaprovider }}

- name: MFA | INITIAL PACKAGES | npm, maven
  yum: name={{ item }} state=present
  with_items:
    - npm
    - maven

- name: MFA | Download | git | MPASSid-proxy
  git:
    repo: 'https://github.com/Digipalvelutehdas/MPASSid-proxy'
    dest: /tmp/MPASSid-proxy
    
- name: MFA | Compile | MPASSid-proxy
  shell: mvn package
  args:
    chdir: /tmp/MPASSid-proxy
    executable: /bin/bash

- name: IDP | MFA | Copy | idp-authn-impl-socialuser | jars
  copy: src=/tmp/MPASSid-proxy/idp-authn-impl-socialuser/target/idp-authn-impl-socialuser-*.jar dest="{{ shibbolethidp_idp_home }}/edit-webapp/WEB-INF/lib/."
- copy: src=/tmp/MPASSid-proxy/idp-authn-impl-socialuser/target/dependency/ dest="{{ shibbolethidp_idp_home }}/edit-webapp/WEB-INF/lib/."

- name: JETTY | MFA | Annotations | idp.xml
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/jetty-base/webapps/idp.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED socialuser -->"
    insertbefore: "</Configure>"
    content: |
      <Call name="setAttribute">
        <Arg>org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern</Arg>
        <Arg>.*/idp-authn-impl-socialuser[^/]*\.jar$</Arg>
      </Call>
  notify: restart shibboleth-idp

- name: IDP | MFA | MPASSid | flow/conf/views
  copy: src=/tmp/MPASSid-proxy/idp-authn-impl-socialuser/src/main/resources/conf dest="{{ shibbolethidp_idp_home }}/."
- copy: src=/tmp/MPASSid-proxy/idp-authn-impl-socialuser/src/main/resources/flows dest="{{ shibbolethidp_idp_home }}/."
- copy: src=/tmp/MPASSid-proxy/idp-authn-impl-socialuser/src/main/resources/views dest="{{ shibbolethidp_idp_home }}/."

- name: IDP | MFA | SocialUser OpenID Connect | Remove default
  xml:
    file: "{{ shibbolethidp_idp_home }}/flows/authn/SocialUserOpenIDConnect/socialuseropenidconnect-authn-beans.xml"
    xpath: //x:beans/x:bean[@id='SetOIDCInformation']
    namespaces:
      util: http://www.springframework.org/schema/util
      x: http://www.springframework.org/schema/beans
    ensure: absent

- name: IDP | MFA | SocialUser OpenID Connect
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/flows/authn/SocialUserOpenIDConnect/socialuseropenidconnect-authn-beans.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED SetOIDCInformation -->"
    insertbefore: "<bean id=\"ValidateOIDCAuthenticationResponse\""
    content: |
      <bean id="JWTPrivateKey"
        class="net.shibboleth.ext.spring.factory.PrivateKeyFactoryBean"
        p:resource="../../../credentials/mfaclient.pem" />      
      <bean id="SetOIDCInformation" class="fi.okm.mpass.idp.authn.impl.SetOIDCInformation"
        p:privKey-ref="JWTPrivateKey" p:responseType="id_token">
        <property name="clientId" value="{{ ansible_fqdn }}" />
        <property name="providerMetadataLocation" value="{{ mfa_provider }}" />
        <property name="redirectURI"
          value="https://{{ ansible_fqdn }}/idp/Authn/SocialUserOpenIdConnectEnd" />
        <property name="Acr">
          <list>
            <value>urn:test:stepup</value>
          </list>
        </property>
        <property name="requestClaims">
          <map>
            <entry key="sub" value="uid" />
            <entry key="eppn" value="stepupEPPN" />
            <entry key="mobile" value="mobile" />
          </map>
        </property>
      </bean>
  notify: restart shibboleth-idp

- name: IDP | MFA | SocialUser OpenID Connect | Remove default
  xml:
    file: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    xpath: //x:beans/x:bean[@id='authn/SocialUserOpenIDConnect']
    namespaces:
      util: http://www.springframework.org/schema/util
      x: http://www.springframework.org/schema/beans
    ensure: absent

- name: IDP | MFA | Configure | Flow
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/authn/general-authn.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED mfa-flow -->"
    insertbefore: '<bean id="authn/Password" parent="shibboleth.AuthenticationFlow"'
    content: |
      <!-- only to be used by mfa, not to be activated separately -->
      <bean id="authn/SocialUserOpenIDConnect" parent="shibboleth.AuthenticationFlow"
        p:nonBrowserSupported="false" p:forcedAuthenticationSupported="true">
        <property name="supportedPrincipals">
          <list>
            <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="urn:test:stepup" />
          </list>
        </property>
      </bean>
      <bean id="authn/MFA" parent="shibboleth.AuthenticationFlow"
        p:passiveAuthenticationSupported="false"
        p:forcedAuthenticationSupported="true">
        <property name="supportedPrincipals">
          <list>
            <bean parent="shibboleth.SAML2AuthnContextClassRef" c:classRef="urn:test:stepup" />
          </list>
        </property>
      </bean>

- name: IDP | MFA | Configure | Flow | Remove default    
  xml:          
    file: "{{ shibbolethidp_idp_home }}/conf/authn/mfa-authn-config.xml"
    xpath: //util:map[@id='shibboleth.authn.MFA.TransitionMap']
    namespaces:                          
      util: http://www.springframework.org/schema/util                        
      x: http://www.springframework.org/schema/beans
    ensure: absent

- name: IDP | MFA | Configure | Flow | Remove default         
  xml:                  
    file: "{{ shibbolethidp_idp_home }}/conf/authn/mfa-authn-config.xml"
    xpath: //x:bean[@id='checkSecondFactor']
    namespaces:                                                
      util: http://www.springframework.org/schema/util                    
      x: http://www.springframework.org/schema/beans
    ensure: absent

- name: IDP | MFA | Configure | Flow | mfa-authn-config.xml
  blockinfile:          
    dest: "{{ shibbolethidp_idp_home }}/conf/authn/mfa-authn-config.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED mfa-flow -->"
    insertbefore: '</beans>'
    content: |
      <util:map id="shibboleth.authn.MFA.TransitionMap">
        <!-- First rule runs the Password login flow. -->
        <entry key="">
          <bean parent="shibboleth.authn.MFA.Transition" p:nextFlow="authn/Password" />
        </entry>
        <!-- Second rule runs oidc mfa flow if password authentication succeeds. -->
        <entry key="authn/Password">
          <bean parent="shibboleth.authn.MFA.Transition"
            p:nextFlowStrategy-ref="doSecondFactor" />
        </entry>
      </util:map>
      
      <!-- Resolves attributes and then runs oidc mfa flow. -->
      <bean id="doSecondFactor" parent="shibboleth.ContextFunctions.Scripted"
        factory-method="inlineScript" p:customObject-ref="shibboleth.AttributeResolverService">
        <constructor-arg>
          <value>
            <![CDATA[
              nextFlow = "authn/SocialUserOpenIDConnect";
              // Set up for an attribute lookup.
              authCtx = input.getSubcontext("net.shibboleth.idp.authn.context.AuthenticationContext");
              mfaCtx = authCtx.getSubcontext("net.shibboleth.idp.authn.context.MultiFactorAuthenticationContext");
              // Attribute check is required to decide if first factor alone is enough.
              resCtx = input.getSubcontext(
              "net.shibboleth.idp.attribute.resolver.context.AttributeResolutionContext", true);
              resCtx.setPrincipal(input.getSubcontext(
              "net.shibboleth.idp.authn.context.SubjectCanonicalizationContext").getPrincipalName());
              resCtx.getRequestedIdPAttributeNames().add("uid");
              resCtx.getRequestedIdPAttributeNames().add("stepupEPPN");
              resCtx.getRequestedIdPAttributeNames().add("mobile");
              resCtx.resolveAttributes(custom);
              //Pass the resolved attributes to context
              suCtx = authCtx.getSubcontext("fi.okm.mpass.idp.authn.impl.SocialUserOpenIdConnectContext", true);
              suCtx.setResolvedIdPAttributes(resCtx.getResolvedIdPAttributes());
              input.removeSubcontext(resCtx);
              nextFlow; // pass control to oidc flow
              ]]>
          </value>
        </constructor-arg>
      </bean>

- name: IDP | MFA | Configure | Flow
  blockinfile:
    dest: "{{ shibbolethidp_idp_home }}/conf/attribute-resolver.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED setupeppn-->"
    insertbefore: '<AttributeDefinition id="eduPersonPrincipalName" xsi:type="Scoped" scope="%{idp.scope}" sourceAttributeID="uid">'
    content: |
      <AttributeDefinition xsi:type="ad:Simple" id="stepupEPPN" sourceAttributeID="eduPersonPrincipalName">
          <Dependency ref="myLDAP" />
      </AttributeDefinition>

- name: IDP | MFA | credentials
  file: path={{ shibbolethidp_idp_home }}/jetty-base/webapps/root/keys state=directory mode=0755
- shell: openssl genrsa -out /opt/shibboleth-idp/credentials/mfaclient.pem 2048
- shell: openssl rsa -in {{ shibbolethidp_idp_home }}/credentials/mfaclient.pem -outform PEM -pubout -out {{ shibbolethidp_idp_home }}/credentials/mfaclientpublic.pem
- file: path={{ shibbolethidp_idp_home }}//credentials/mfaclient.pem mode=0750 group=jetty owner=root
- shell: npm install -g pem-jwk
- shell: pem-jwk {{ shibbolethidp_idp_home }}/credentials/mfaclientpublic.pem > {{ shibbolethidp_idp_home }}/jetty-base/webapps/root/keys/mfaclientkeyset.jwk

- file: path={{ shibbolethidp_idp_home }}/jetty-base/webapps/root/index.html state=touch
- file: path={{ shibbolethidp_idp_home }}/jetty-base/webapps/root/keys/index.html state=touch

- name: IDP | MFA | Configure | AUTH flows
  lineinfile: dest={{ shibbolethidp_idp_home }}/conf/idp.properties regexp="^#?\s*({{ item.option }}\s*=)" backrefs=yes  line="\\1{{ item.value }}"
  with_items:
    - { option: 'idp.authn.flows', value: "Password|MFA", state: present }

- file: path={{ shibbolethidp_idp_home }}/jetty-base/webapps/root/index.html state=touch
- file: path={{ shibbolethidp_idp_home }}/jetty-base/webapps/root/keys/index.html state=touch
  notify: rebuild shibboleth-idp
