---
- name: configure shibboleth-idp ldap.properties
  lineinfile: dest={{ shibbolethidp_idp_home }}/conf/ldap.properties regexp="^#?\s*({{ item_ldap.option }}\s*=)" backrefs=yes  line="\\1 {{ item_ldap.valueÂ }}"
  with_items:
    - { option: 'idp.authn.LDAP.authenticator', value: 'bindSearchAuthenticator'}
    - { option: 'idp.authn.LDAP.ldapURL', value: '{{ shibbolethidp_ldapurl }}'}
    - { option: 'idp.authn.LDAP.useStartTLS', value: 'false' }
    - { option: 'idp.authn.LDAP.useSSL', value: 'false' }
      #    - { option: 'idp.authn.LDAP.sslConfig ', value: 'certificateTrust' }
    - { option: 'idp.authn.LDAP.trustCertificates', value: '/etc/pki/tls/certs/DigiCertCA.crt' }
    - { option: 'idp.authn.LDAP.baseDN', value: '{{ shibbolethidp_ldapbasedn }}' }
    - { option: 'idp.authn.LDAP.subtreeSearch', value: '{{ shibbolethidp_ldapsubtreesearch }}' }
    - { option: 'idp.authn.LDAP.bindDN', value: '{{ shibbolethidp_ldapuser }}' }
    - { option: 'idp.authn.LDAP.bindDNCredential', value: '{{ shibbolethidp_ldappassword }}' }
    - { option: 'idp.authn.LDAP.userFilter', value: '({{ shibbolethidp_ldapuserfilter }}={user})' }
    - { option: 'idp.attribute.resolver.LDAP.searchFilter', value: '({{ shibbolethidp_ldapuserfilter }}=$resolutionContext.principal)' }
  loop_control:
    loop_var: item_ldap
